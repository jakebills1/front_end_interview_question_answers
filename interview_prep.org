#+TITLE: Front End Interview Prep
#+OPTIONS: toc:nil num:2
* HTML
** What does a DOCTYPE do?
*** are optional, but more-or-less required for legacy compatibility reasons. if omitted, browsers may render the page in a way that is imcompatible with some specifications
**** source: https://html.spec.whatwg.org/multipage/syntax.html#the-doctype
** How do you serve a page with content in multiple languages?
*** the lang tag can be used on any element. it should be fed a string containing a valid language tag. the lang tag on the <html> element is the default language for the page
**** source: https://www.w3.org/International/questions/qa-html-language-declarations
** What kind of things must you be wary of when design or developing for multilingual sites?
*** setting the charset correctly. unicode 8 can accomadate many different languages. Make sure the font can handle non-Latin based languages. relative "wordiness" of different languages. direction of writing. date format. culture
**** source: https://webdesign.tutsplus.com/articles/tips-for-designing-and-building-a-multilingual-website--cms-24708
** What are data-attributes good for?
*** passing data from the dom to scripts. basically gives the html more power in a programming context
**** source: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-* 
** Consider HTML5 as an open web platform. What are the building blocks of HTML5?
*** semantics, connectivity, offline & storage, multimedia, 2d/3d graphics & effects, performance and integration, device access, styling 
**** source: https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5
** Describe the difference between a cookie, sessionStorage and localStorage.
*** Session storage is cleared when the session expires. Cookies = server-side, local storage = client side
**** source: https://stackoverflow.com/questions/19867599/what-is-the-difference-between-localstorage-sessionstorage-session-and-cookies
** Describe the difference between <script>, <script async> and <script defer>.
*** When a browser is loading html and it encounters a script tag, the rendering stops until the execution of the script is done. Async and defer are ways of telling the browser to load the page content before scripts load
**** source: https://javascript.info/script-async-defer
** Why is it generally a good idea to position CSS <link>s between <head></head> and JS <script>s just before </body>? Do you know any exceptions?
*** The browser loads in the order of the page, so it should load html/css before js. If you are using a css library with a jquery dependency. On modern browsers, speculative loading is used to let the browser download elements further in the page before the script is done, making this  less of an issue.  Part of specification, and helps progressive rendering
**** source: https://stackoverflow.com/questions/9271276/is-the-recommendation-to-include-css-before-javascript-invalid
** What is progressive rendering?
*** Prioritizing loading certain elements of the site first as to give the user the experience of fast loading. Lazy loading, above the fold rendering
**** source: https://stackoverflow.com/questions/33651166/what-is-progressive-rendering 
** Why you would use a srcset attribute in an image tag? Explain the process the browser uses when evaluating the content of this attribute.
*** Provides a set of src’s for an image and the width of the image. It selects the first true option in sizes for the viewport
**** source: https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images
** Have you used different HTML templating languages before?
*** ( way of introducing programming concepts to html, supporting dynamic content ) rails views? 
* CSS 
** What is CSS selector specificity and how does it work?
***  assigns a value to selectors based on how general or specific. ( in order of specificity: type selectors, class selectors, id selectors )
**** source: https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity 
** What's the difference between "resetting" and "normalizing" CSS? Which would you choose, and why?
*** Css reset removes all built in browser styling. Normalize tries to standardize across browsers. The latter, because a lot of built in styles are pretty useful. 
**** source: https://pineco.de/a-brief-about-css-reset-and-normalize/ 
** Describe Floats and how they work.
*** Allows an element to float in its container. An image with a float right will appear to the right of text in its container.  
**** source: https://developer.mozilla.org/en-US/docs/Web/CSS/float 
** Describe z-index and how stacking context is formed. 
*** They determine the order in which stacking elements are rendered. Larger z values are rendered before smaller ones
**** source: https://developer.mozilla.org/en-US/docs/Web/CSS/z-index 
** Describe BFC (Block Formatting Context) and how it works.
*** a bfc is created by a container thats contents will conform to the box model. Use cases: containing the overflow when a floated element is taller than its containing div. dealing with margin collapsing
**** source: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context 
** What are the various clearing techniques and which is appropriate for what context?
*** Clearing: if two preceding elements are floated left and right, clearing the preceding element makes sure it takes up the space below the two  elements
**** source: https://developer.mozilla.org/en-US/docs/Web/CSS/clear
*** techniques: empty div to clear left and right floated elements. overflow on parent element. using a psuedo element :after the elements that need to be cleared
**** source: https://css-tricks.com/all-about-floats/ 
** How would you approach fixing browser-specific styling issues?
*** Not use unsupported features in a way that adds too much to the presentation, feature queries, writing older css first, then having a feature test, and overrideing the css it the browser passes the feature test. Fallback for css rules: write most supported rule first, then newer css feature. older browsers will just skip a rule that can't be rendered
**** source: https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS 
** How do you serve your pages for feature-constrained browsers?
*** making sure the base of it works for any browser / does not contain features that, if broken, compromise useability, rather when working enhance the UX. 
*** What techniques/processes do you use?
**** @supports ? 
** What are the different ways to visually hide content (and make it available only for screen readers)?
*** Using absolute positioning to hide it off screen
**** source: https://zellwk.com/blog/hide-content-accessibly/ 
** Have you ever used a grid system, and if so, what do you prefer?
** Have you used or implemented media queries or mobile specific layouts/CSS?
** Are you familiar with styling SVG?
** Can you give an example of an `@media` property other than `screen`?
*** all, print, speech
**** source: https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries 
** What are some of the "gotchas" for writing efficient CSS?
*** avoid key selectors( the rightmost selector in a compound selector statement) that match a large number of elements ( because the browser will first match the key selector. the key selector should be a class or an id not a type ). use class and id selectors instead of type selectors. avoid redundancy. no universal selector 
**** source: https://css-tricks.com/efficiently-rendering-css/ 
** What are the advantages/disadvantages of using CSS preprocessors?
*** Advantages: more DRY. nesting. mixins
*** disadvantages: too much nesting. larger css file. performance. 
*** source: https://www.reddit.com/r/Frontend/comments/3sntqe/what_are_the_pros_and_cons_of_css_preprocessors/?st=k15gxthq&sh=43a0f54e 
** How would you implement a web design comp that uses non-standard fonts?
** Explain how a browser determines what elements match a CSS selector.
*** Before rendering any content it makes the CSS object model ( CSSOM ) this is a tree structure much like the dom, that the browser combines with the dom to make a render tree. This is basically the element, plus the styles. Layout is next, then paint, where actual pixels show up on the page 
**** source: https://blog.logrocket.com/how-css-works-parsing-painting-css-in-the-critical-rendering-path-b3ee290762d3/ 
** Describe pseudo-elements and discuss what they are used for.
*** used after a selector to style only 1 part of the selected element. ex p::first-line will apply to the first line of a p tag. 
*** use cases: drop caps. inserting content without adding elements to html
**** source: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
** Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.
*** the box is the aggregate of margin, border, padding, and the content itself surrounding every html element. changing the value of box-sizing. 
**** content-box: model where width of an element is only the content itself
**** border-box: model where width of element is content plus padding and border
*** source: https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model 
** What does ```* { box-sizing: border-box; }``` do? What are its advantages?
*** width values will include border and padding in their calculation. ex a div width a width of 350 px and border of 10px will produce a div whos content border and padding adds up to 350px
*** advantages: easier calculations
** What is the CSS `display` property and can you give a few examples of its use?
*** one: whether it is block or inline, two: whether its children are grid or flex etc. 
**** source: https://developer.mozilla.org/en-US/docs/Web/CSS/display
** What's the difference between inline and inline-block?
*** inline elements do nto respect css rules for width and height.
**** source: https://alligator.io/css/display-inline-vs-inline-block/
** What's the difference between the "nth-of-type()" and "nth-child()" selectors?
*** nth-of-type will only select the nth element of the same type. nth-child will select the nth among sibling elements 
**** source: https://bitsofco.de/nth-child-vs-nth-of-type/
** What's the difference between a relative, fixed, absolute and statically positioned element?
*** static is the default, meaning the element is positioned in the normal flow of the document.  
*** relative: means the element is positioned relative to its static position, so offset by the top right bottom left values. 
*** absolute: the element is not placed in the normal document flow. it is placed relative to the closest positioned ancestor, or the containing block. 
*** fixed: the element is not in the flow of the document. it is relative to either the viewport, or an ancestor with a value of transform, perspective, or filter of something other than none.
*** source: https://developer.mozilla.org/en-US/docs/Web/CSS/position 
** What existing CSS frameworks have you used locally, or in production? How would you change/improve them?
** Have you used CSS Grid?
** Can you explain the difference between coding a web site to be responsive versus using a mobile-first strategy?
** Have you ever worked with retina graphics? If so, when and what techniques did you use?
** Is there any reason you'd want to use `translate()` instead of *absolute positioning*, or vice-versa? And why?
*** translate can have performance benefits, since it triggers a render in a different layer than positioning. animations.
* Javascript
** Explain event delegation.
*** Having a parent element listen for all events occurring within it. ex, putting an event listener on a form, and making decisions based on the value of event.target, when the listener fires. 
**** source: https://javascript.info/event-delegation
** Explain how `this` works in JavaScript.
*** source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this
*** References the containing object
*** Can you give an example of one of the ways that working with `this` has changed in ES6?
**** When used in arrow function, this retains the lexical context where the function was called from 
** Explain how prototypal inheritance works.
*** every object in javascript inherits properties from its prototype. for instance all arrays have the properties of Array.prototype, which inherits from its own prototype. 
**** source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain
** What's the difference between a variable that is: `null`, `undefined` or undeclared?
*** variables not yet assigned a value have the value undefined. null values must be deliberately assigned to a variable. accessing undeclared ( name doesn't exist in current scope ) variables will result in an error but using type of will return undefined.  
**** undefined is an object, null is a primitive 
*** How would you go about checking for any of these states?
**** typeof checkes for undefined or undeclared. use strict equals to check for null ( null == undefined is true )
*** source: https://stackoverflow.com/questions/5101948/javascript-checking-for-null-vs-undefined-and-difference-between-and
** What is a closure, and how/why would you use one?
*** a combination of a function and the lexical context where that function was declared. 
*** having a function that returns a function with some local state saved
*** use case: use like an object with only one method or to emulate a private method. 
*** source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures
** What language constructions do you use for iterating over object properties and array items?
*** Map, filter, select, forEach
** Can you describe the main difference between the `Array.forEach()` loop and `Array.map()` methods and why you would pick one versus the other?
*** forEach mutates the array it is called on, and returns undefined. Map returns a new array, leaving the array it was called on unchanged. To maintain function purity
**** source: https://codeburst.io/javascript-map-vs-foreach-f38111822c0f
** What's a typical use case for anonymous functions?
*** passing as arguments to other functions
**** source: https://www.quora.com/Whats-a-typical-use-case-for-anonymous-functions-in-JavaScript
** What's the difference between host objects and native objects
*** native objects are those built in to the ecmascript specification. host objects are those defined by the host environment, ex a browser has window, document, etc.
**** source: https://stackoverflow.com/questions/7614317/what-is-the-difference-between-native-objects-and-host-objects
** Explain the difference between: `function Person(){}`, `var person = Person()`, and `var person = new Person()`?
*** 1st is function declaration, 2nd is saving result of called function. 3rd, is declaring an instance of a class called Person
** Explain the differences on the usage of `foo` between `function foo() {}` and `var foo = function() {}`
*** in the first case is a function declaration. the 2nd is a function expression. they enter the scope at different times in the parsing cycle. 
**** source: https://stackoverflow.com/questions/5142286/two-functions-with-the-same-name-in-javascript-how-can-this-work/5142335#5142335
** Can you explain what `Function.call` and `Function.apply` do? What's the notable difference between the two?
*** Call is property of methods of objects, and takes an instance as an argumnet. it runs the method of the object, in the scope of the instance. Additional arguments can be added, but number of arguments does have to bo known. Apply does the same thing, but the second argument is an array of arguments to pass to the function
**** source: http://hangar.runway7.net/javascript/difference-call-apply
** Explain `Function.prototype.bind`.
*** returns a function with the given value for this.  Does not call it. 
**** source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
** What's the difference between feature detection, feature inference, and using the UA string?
*** feature detection is testing for a user agent feature, and executing code based on that. feature interference is assuming that if one new browser feature exists, more must exist. this is not recommended. the ua string is a string that a browser sends listing information and available features. this is not a reliable way of testing for features
**** source: https://stackoverflow.com/questions/20104930/whats-the-difference-between-feature-detection-feature-inference-and-using-th/20105074#20105074
** Explain "hoisting".
*** Variable DECLARATIONS, NOT ASSIGNMENTS are moved to the top of the execution context 
**** source: https://developer.mozilla.org/en-US/docs/Glossary/Hoisting
** Event bubbling vs event capturing.
*** Two ways of dealing with the situation where an event fires nested in the Dom tree where two event handlers could conceivably react to the event. Bubbling is where it travels up the tree, in that the inner most event handler fires. Capturing is where the outer most one fires, trigger the inner event listener.
**** source: https://stackoverflow.com/questions/4616694/what-is-event-bubbling-and-capturing
** What's the difference between an "attribute" and a "property"?
*** Attributes are what html has. When those attributes enter the html object created in the Dom tree, they become properties of that object. for instance, class is an html attribute and className is the DOM property
**** source: https://frontarm.com/james-k-nelson/html-vs-dom-attributes/
** What are the pros and cons of extending built-in JavaScript objects?
*** Interfering with inherited properties or methods by having the same name. Adding functionality to objects. 
**** source: https://stackoverflow.com/questions/8859828/javascript-what-dangers-are-in-extending-array-prototype
** What is the difference between `==` and `===`?
*** Triple equals does not change types, “1” === 1 is false but “1” == 1 is true
**** source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness
** Explain the same-origin policy with regards to JavaScript.
*** Determines whether two different web pages can interact with each other. They must have the same scheme, host, and port to do so. This stops js from running on one site and effecting the other, if they are not directly related. 
**** source: https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy
** Why is it called a Ternary operator, what does the word "Ternary" indicate?
*** Syntactic sugar for an if else. the word ternary refers to three parts. a ternary operator has a condition, and two branches for true and false.
**** source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator
** What is strict mode? What are some of the advantages/disadvantages of using it?
*** strict mode is a flag to instruct the browser to be less lenient and throw errors in certain situations. it dissalows the use of implicit declaration of variables, which may affect an older codebase, but is good in that implicit variables are unclear. 
** What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?
*** advantages: classes, type checking, new features. 
*** disadvantages: overhead of webpack or gulp. familiarity with devs.  
*** source: https://www.quora.com/What-are-some-of-the-advantages-disadvantages-of-writing-JavaScript-code-in-a-language-that-compiles-to-JavaScript
** What tools and techniques do you use debugging JavaScript code?
*** jest, console.log, debugger.
** Explain the difference between mutable and immutable objects.
*** What is an example of an immutable object in JavaScript?
**** React's state
*** What are the pros and cons of immutability?
**** makes equality more reliable. muteable data is more performative
*** How can you achieve immutability in your own code?
**** use Object.assign to change properties of objects. use map and filter or similar constructs to change arrays. 
*** source: https://medium.com/dailyjs/the-state-of-immutability-169d2cd11310
** Explain the difference between synchronous and asynchronous functions.
*** Synchronous code stops everything from happened until they return. Async do not
**** source: https://stackoverflow.com/questions/2035645/when-is-javascript-synchronous
** What is event loop?
*** the browser is basically wating for messages to be produced. messages are produced wneh an event occurs and there is an event listener attached to it. 
*** What is the difference between call stack and task queue?
**** the call stack is composed of fucntions that have been called and their associated data. the task queue is a list of messages to be processed
*** source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop
** What are the differences between variables created using `let`, `var` or `const`?
*** Const is immutable and block-scoped, let is block scoped and muteable. Var is function scoped/ can be global if declared outside of a function. 
**** source: https://dev.to/sarah_chima/var-let-and-const--whats-the-difference-69e
** What are the differences between ES6 class and ES5 function constructors?
*** source: https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e
** Can you offer a use case for the new arrow `=>` function syntax? How does this new syntax differ from other functions?
*** before every function had its own this value based on the exectuion contex. arrow functions do not create their own this value. in the construction  of a class, this refers to the instance
**** source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
** What advantage is there for using the arrow syntax for a method in a constructor?
** What is the definition of a higher-order function?
*** functions that takes a function as an argument, or returns a function
**** source: https://medium.com/javascript-scene/higher-order-functions-composing-software-5365cf2cbe99
** Can you give an example for destructuring an object or an array?
*** const { butts, } = this.state.props
**** source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
** Can you give an example of generating a string with ES6 Template Literals?
*** Var n = 9; str = `number ${n}`
**** source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
** Can you give an example of a curry function and why this syntax offers an advantage?
*** breaking a function that takes multiple arguements into a multiple functions that take 1 argument. event handling and async code. 
**** source: https://medium.com/@kbrainwave/currying-in-javascript-ce6da2d324fe
** What are the benefits of using `spread syntax` and how is it different from `rest syntax`?
*** the spread operator is used to expand the properties of an object. rest is used to collect the remaining elements of an array.
*** spread: copying arrays, passing seperate elements of an array as function params, adding elements to an existing array.  
*** rest: functions with dynamic numbers of params.
*** source: https://scotch.io/bar-talk/javascripts-three-dots-spread-vs-rest-operators543
** How can you share code between files?
*** exports. modules, globals
**** source: https://stackoverflow.com/questions/31030013/sharing-js-functions-between-files-without-making-them-global-or-attaching-them
** Why you might want to create static class members?
*** To have a method that acts on the class itself, not the instance. Utility functions. 
**** source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static
** What is the reduce function?  
*** a function that iterates over an array, executing a callback function, to reduce the array to a single value. the second argument is the starting value for the first argument to the callback function, the accumulator. the second arg to the callback is the current value in the array
**** source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce
** React: What is a ref?
*** a way to imperatively affect the DOM outside of the normal parent-child dataflow in react. They can only be used on class components
* General
** What did you learn yesterday/this week?
*** actual specs on html/css/javascript/how Redux works
** What excites or interests you about coding?
*** problem solving. making computers do things. power. 
** What is a recent technical challenge you experienced and how did you solve it?
*** installing babel in a node environment. beforehand I would have avoided it
** When building a new web site or maintaining one, can you explain some techniques you have used to increase performance?
*** cloud served images instead of static assets. 
** Can you describe some SEO best practices or techniques you have used lately?
** Can you explain any common techniques or recent issues solved in regards to front-end security? 
*** validating inputs
** What actions have you personally taken on recent projects to increase maintainability of your code?
*** moving styles to one place. removing pixels
** Talk about your preferred development environment.
*** vs code with vim bindings
** Which version control systems are you familiar with?
*** git 
** Can you describe your workflow when you create a web page?
*** write the backend up to the point of having the proper endpoints to hit, even if they don't have the right data. 
** If you have 5 different stylesheets, how would you best integrate them into the site?
** Can you describe the difference between progressive enhancement and graceful degradation?
** How would you optimize a website's assets/resources?
*** lazy loading, cloud server. 
** How many resources will a browser download from a given domain at a time?
  * What are the exceptions?
** Name 3 ways to decrease page load (perceived or actual load time).
** If you jumped on a project and they used tabs and you used spaces, what would you do?
** Describe how you would create a simple slideshow page.
*** 
** If you could master one technology this year, what would it be?
** Explain the importance of standards and standards bodies.
** What is Flash of Unstyled Content? How do you avoid FOUC?
** Explain what ARIA and screenreaders are, and how to make a website accessible.
*** aria are tags that are used to define the semantics of certain elements more clearly. screenreaders parse the availabe text on a website and read it to visually disabled people. Using alt tags on images
** Explain some of the pros and cons for CSS animations versus JavaScript animations.
*** css animations are easier but less powerful
** What does CORS stand for and what issue does it address?
*** cross origin resource sharing. webpages on different domains interacting with each other. 
** How did you handle a disagreement with your boss or your collaborator?
*** try to explain my rationale for thinking a certain thing, but also try just as hard to understand their motivation in thinking a certain way
** What resources do you use to learn about the latest in front end development and design?
*** reddit, medium, hacker news, 
  
